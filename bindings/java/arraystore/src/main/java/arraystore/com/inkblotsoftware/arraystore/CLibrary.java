// THIS CODE IS 100% AUTOGENERATED, DO NOT EDIT EXCEPT EXPERIMENTALLY
// Copyright (C) 2019 Inkblot Software Limited

package com.inkblotsoftware.arraystore;
import com.sun.jna.Native;
import com.sun.jna.Structure;
import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
import com.sun.jna.ptr.IntByReference;
import java.nio.LongBuffer;
import com.sun.jna.ptr.LongByReference;
import java.nio.FloatBuffer;
import com.sun.jna.ptr.FloatByReference;
import java.nio.DoubleBuffer;
import com.sun.jna.ptr.DoubleByReference;
import java.nio.ByteBuffer;
import com.sun.jna.ptr.ByteByReference;


public interface CLibrary extends Library {
    static final CLibrary INSTANCE = (CLibrary) Native.load
                                         ("arraystore", CLibrary.class);


    //  ------------------------------------------------------------
    //  asenv_t

    Pointer asenv_new         (String path);
    Pointer asenv_new_mapsize (String path, Size_t mapsize);
    void    asenv_destroy     (PointerByReference self_p);


    //  ------------------------------------------------------------
    //  astxn_t

    Pointer astxn_new_rdrw   (Pointer env);
    Pointer astxn_new_rdonly (Pointer env);
    void    astxn_destroy    (PointerByReference self_p);
    boolean astxn_is_rdonly  (Pointer self);
    boolean astxn_is_rdrw    (Pointer self);
    void    astxn_abort      (Pointer self);
    int     astxn_commit     (Pointer self);


    //  ------------------------------------------------------------
    //  Store classes + spans

    // -- i32as_t
    
    @Structure.FieldOrder({"data", "size"})
    public static class i32span extends Structure {
        public static class ByValue
            extends i32span implements Structure.ByValue {}
        public IntByReference data;
        public Size_t size;
    }
    
    Pointer i32as_new     (Pointer env, String name);
    void    i32as_destroy (PointerByReference self_p);
    int     i32as_put     (Pointer self, Pointer txn,
                            UInt64 key,
                            IntBuffer data, Size_t size);
    int    i32as_delete   (Pointer self, Pointer txn, UInt64 key);
    int    i32as_exists   (Pointer self, Pointer txn, UInt64 key);
    i32span.ByValue
           i32as_get (Pointer self, Pointer txn, UInt64 key);

    // -- i64as_t
    
    @Structure.FieldOrder({"data", "size"})
    public static class i64span extends Structure {
        public static class ByValue
            extends i64span implements Structure.ByValue {}
        public LongByReference data;
        public Size_t size;
    }
    
    Pointer i64as_new     (Pointer env, String name);
    void    i64as_destroy (PointerByReference self_p);
    int     i64as_put     (Pointer self, Pointer txn,
                            UInt64 key,
                            LongBuffer data, Size_t size);
    int    i64as_delete   (Pointer self, Pointer txn, UInt64 key);
    int    i64as_exists   (Pointer self, Pointer txn, UInt64 key);
    i64span.ByValue
           i64as_get (Pointer self, Pointer txn, UInt64 key);

    // -- f32as_t
    
    @Structure.FieldOrder({"data", "size"})
    public static class f32span extends Structure {
        public static class ByValue
            extends f32span implements Structure.ByValue {}
        public FloatByReference data;
        public Size_t size;
    }
    
    Pointer f32as_new     (Pointer env, String name);
    void    f32as_destroy (PointerByReference self_p);
    int     f32as_put     (Pointer self, Pointer txn,
                            UInt64 key,
                            FloatBuffer data, Size_t size);
    int    f32as_delete   (Pointer self, Pointer txn, UInt64 key);
    int    f32as_exists   (Pointer self, Pointer txn, UInt64 key);
    f32span.ByValue
           f32as_get (Pointer self, Pointer txn, UInt64 key);

    // -- f64as_t
    
    @Structure.FieldOrder({"data", "size"})
    public static class f64span extends Structure {
        public static class ByValue
            extends f64span implements Structure.ByValue {}
        public DoubleByReference data;
        public Size_t size;
    }
    
    Pointer f64as_new     (Pointer env, String name);
    void    f64as_destroy (PointerByReference self_p);
    int     f64as_put     (Pointer self, Pointer txn,
                            UInt64 key,
                            DoubleBuffer data, Size_t size);
    int    f64as_delete   (Pointer self, Pointer txn, UInt64 key);
    int    f64as_exists   (Pointer self, Pointer txn, UInt64 key);
    f64span.ByValue
           f64as_get (Pointer self, Pointer txn, UInt64 key);

    // -- byteas_t
    
    @Structure.FieldOrder({"data", "size"})
    public static class bytespan extends Structure {
        public static class ByValue
            extends bytespan implements Structure.ByValue {}
        public ByteByReference data;
        public Size_t size;
    }
    
    Pointer byteas_new     (Pointer env, String name);
    void    byteas_destroy (PointerByReference self_p);
    int     byteas_put     (Pointer self, Pointer txn,
                            UInt64 key,
                            ByteBuffer data, Size_t size);
    int    byteas_delete   (Pointer self, Pointer txn, UInt64 key);
    int    byteas_exists   (Pointer self, Pointer txn, UInt64 key);
    bytespan.ByValue
           byteas_get (Pointer self, Pointer txn, UInt64 key);
}

