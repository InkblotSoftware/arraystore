// THIS CODE IS 100% AUTOGENERATED, DO NOT EDIT EXCEPT EXPERIMENTALLY
// Copyright (C) 2019 Inkblot Software Limited

package com.inkblotsoftware.arraystore;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.FloatBuffer;
import java.nio.DoubleBuffer;

public class I32Store implements AutoCloseable {
    Pointer _handle;
    
    public I32Store (ASEnv env, String name) {
        _handle = CLibrary.INSTANCE.i32as_new (env._handle, name);
        // TODO better exception
        if (_handle == Pointer.NULL) {
            throw new RuntimeException ("Open failed");
        }
    }

    @Override public void close () {
        if (_handle == Pointer.NULL)
           return;
        CLibrary.INSTANCE.i32as_destroy (new PointerByReference (_handle));
        _handle = Pointer.NULL;
    }

    public IntBuffer get (ASTxn txn, long key) {
        CLibrary.i32span.ByValue sp =
            CLibrary.INSTANCE.i32as_get (_handle, txn._handle, UInt64.of(key));
        assert (sp != null);

        // TODO better exception
        if (sp.data == null)
            throw new RuntimeException ("Key not found");

        long numBytes = sp.size.longValue() * 4;
        ByteBuffer bb = sp.data.getPointer ()
                            .getByteBuffer (0, numBytes);
        return bb.asIntBuffer ();
    }

    public void put (ASTxn txn, long key, int[] data) {
        put (txn, key, IntBuffer.wrap (data));
    }
    public void put (ASTxn txn, long key, IntBuffer data) {
        int rc = CLibrary.INSTANCE.i32as_put (_handle, txn._handle,
                                               UInt64.of (key),
                                               data, Size_t.of (data.limit()));
        // TODO better exception
        if (rc != 0)
            throw new RuntimeException ("put() failed");
    }

    public boolean exists (ASTxn txn, long key) {
        int res = CLibrary.INSTANCE.i32as_exists (_handle, txn._handle,
                                                    UInt64.of (key));
        return res == 1;
    }
}

